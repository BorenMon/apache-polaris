services:
  polaris:
    image: apache/polaris:latest
    platform: linux/amd64
    ports:
      - "8181:8181"
      - "8182:8182"
    networks:
      - local-iceberg-lakehouse
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: ap-southeast-1
      AWS_ENDPOINT_URL_S3: http://10.0.129.58:9000
      AWS_ENDPOINT_URL_STS: http://10.0.129.58:9000
      POLARIS_PERSISTENCE_TYPE: relational-jdbc
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: secret
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/polaris
      POLARIS_BOOTSTRAP_CREDENTIALS: default-realm,root,secret
      polaris.features.DROP_WITH_PURGE_ENABLED: true
      polaris.realm-context.realms: default-realm
      polaris.features."SUPPORTED_CATALOG_STORAGE_TYPES": "[\"S3\"]"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/q/health"]
      interval: 2s
      timeout: 10s
      retries: 10
      start_period: 10s

  trino:
    image: trinodb/trino:460
    ports:
      - "8080:8080"
    environment:
      - TRINO_JVM_OPTS=-Xmx2G
    networks:
      - local-iceberg-lakehouse
    volumes:
      - ./trino/catalog:/etc/trino/catalog

  # minio:
  #   image: quay.io/minio/minio
  #   environment:
  #     MINIO_ROOT_USER: minio
  #     MINIO_ROOT_PASSWORD: minio123
  #     MINIO_REGION_NAME: ap-southeast-1
  #   networks:
  #     - local-iceberg-lakehouse
  #   ports:
  #     - "9001:9001"
  #     - "9000:9000"
  #   command: ["server", "/data", "--console-address", ":9001"]

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: polaris
    networks:
      - local-iceberg-lakehouse
    ports:
      - "5432:5432"
   
networks:
  local-iceberg-lakehouse:
    name: local-iceberg-lakehouse